// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("UserTable1s", testUserTable1s)
	t.Run("UserTable2s", testUserTable2s)
	t.Run("UserTable3s", testUserTable3s)
}

func TestDelete(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sDelete)
	t.Run("UserTable2s", testUserTable2sDelete)
	t.Run("UserTable3s", testUserTable3sDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sQueryDeleteAll)
	t.Run("UserTable2s", testUserTable2sQueryDeleteAll)
	t.Run("UserTable3s", testUserTable3sQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sSliceDeleteAll)
	t.Run("UserTable2s", testUserTable2sSliceDeleteAll)
	t.Run("UserTable3s", testUserTable3sSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sExists)
	t.Run("UserTable2s", testUserTable2sExists)
	t.Run("UserTable3s", testUserTable3sExists)
}

func TestFind(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sFind)
	t.Run("UserTable2s", testUserTable2sFind)
	t.Run("UserTable3s", testUserTable3sFind)
}

func TestBind(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sBind)
	t.Run("UserTable2s", testUserTable2sBind)
	t.Run("UserTable3s", testUserTable3sBind)
}

func TestOne(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sOne)
	t.Run("UserTable2s", testUserTable2sOne)
	t.Run("UserTable3s", testUserTable3sOne)
}

func TestAll(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sAll)
	t.Run("UserTable2s", testUserTable2sAll)
	t.Run("UserTable3s", testUserTable3sAll)
}

func TestCount(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sCount)
	t.Run("UserTable2s", testUserTable2sCount)
	t.Run("UserTable3s", testUserTable3sCount)
}

func TestHooks(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sHooks)
	t.Run("UserTable2s", testUserTable2sHooks)
	t.Run("UserTable3s", testUserTable3sHooks)
}

func TestInsert(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sInsert)
	t.Run("UserTable1s", testUserTable1sInsertWhitelist)
	t.Run("UserTable2s", testUserTable2sInsert)
	t.Run("UserTable2s", testUserTable2sInsertWhitelist)
	t.Run("UserTable3s", testUserTable3sInsert)
	t.Run("UserTable3s", testUserTable3sInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sReload)
	t.Run("UserTable2s", testUserTable2sReload)
	t.Run("UserTable3s", testUserTable3sReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sReloadAll)
	t.Run("UserTable2s", testUserTable2sReloadAll)
	t.Run("UserTable3s", testUserTable3sReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sSelect)
	t.Run("UserTable2s", testUserTable2sSelect)
	t.Run("UserTable3s", testUserTable3sSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sUpdate)
	t.Run("UserTable2s", testUserTable2sUpdate)
	t.Run("UserTable3s", testUserTable3sUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("UserTable1s", testUserTable1sSliceUpdateAll)
	t.Run("UserTable2s", testUserTable2sSliceUpdateAll)
	t.Run("UserTable3s", testUserTable3sSliceUpdateAll)
}
