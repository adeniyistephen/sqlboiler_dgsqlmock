// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserTable1s(t *testing.T) {
	t.Parallel()

	query := UserTable1s()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserTable1sDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable1sQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserTable1s().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable1sSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable1Slice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable1sExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserTable1Exists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserTable1 exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserTable1Exists to return true, but got false.")
	}
}

func testUserTable1sFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userTable1Found, err := FindUserTable1(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userTable1Found == nil {
		t.Error("want a record, got nil")
	}
}

func testUserTable1sBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserTable1s().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserTable1sOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserTable1s().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserTable1sAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userTable1One := &UserTable1{}
	userTable1Two := &UserTable1{}
	if err = randomize.Struct(seed, userTable1One, userTable1DBTypes, false, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable1Two, userTable1DBTypes, false, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable1One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable1Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable1s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserTable1sCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userTable1One := &UserTable1{}
	userTable1Two := &UserTable1{}
	if err = randomize.Struct(seed, userTable1One, userTable1DBTypes, false, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable1Two, userTable1DBTypes, false, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable1One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable1Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userTable1BeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1AfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1AfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1BeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1AfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1BeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1AfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1BeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func userTable1AfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable1) error {
	*o = UserTable1{}
	return nil
}

func testUserTable1sHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserTable1{}
	o := &UserTable1{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userTable1DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable1 object: %s", err)
	}

	AddUserTable1Hook(boil.BeforeInsertHook, userTable1BeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userTable1BeforeInsertHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.AfterInsertHook, userTable1AfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userTable1AfterInsertHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.AfterSelectHook, userTable1AfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userTable1AfterSelectHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.BeforeUpdateHook, userTable1BeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userTable1BeforeUpdateHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.AfterUpdateHook, userTable1AfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userTable1AfterUpdateHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.BeforeDeleteHook, userTable1BeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userTable1BeforeDeleteHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.AfterDeleteHook, userTable1AfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userTable1AfterDeleteHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.BeforeUpsertHook, userTable1BeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userTable1BeforeUpsertHooks = []UserTable1Hook{}

	AddUserTable1Hook(boil.AfterUpsertHook, userTable1AfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userTable1AfterUpsertHooks = []UserTable1Hook{}
}

func testUserTable1sInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable1sInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userTable1ColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable1sReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable1sReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable1Slice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable1sSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable1s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userTable1DBTypes = map[string]string{`ID`: `bigint`, `Firstname`: `varchar`, `Lastname`: `varchar`}
	_                 = bytes.MinRead
)

func testUserTable1sUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userTable1PrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userTable1AllColumns) == len(userTable1PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserTable1sSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userTable1AllColumns) == len(userTable1PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable1{}
	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable1DBTypes, true, userTable1PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userTable1AllColumns, userTable1PrimaryKeyColumns) {
		fields = userTable1AllColumns
	} else {
		fields = strmangle.SetComplement(
			userTable1AllColumns,
			userTable1PrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserTable1Slice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserTable1sUpsert(t *testing.T) {
	t.Parallel()

	if len(userTable1AllColumns) == len(userTable1PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserTable1UniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserTable1{}
	if err = randomize.Struct(seed, &o, userTable1DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable1: %s", err)
	}

	count, err := UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userTable1DBTypes, false, userTable1PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable1 struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable1: %s", err)
	}

	count, err = UserTable1s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
