// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserTable2s(t *testing.T) {
	t.Parallel()

	query := UserTable2s()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserTable2sDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable2sQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserTable2s().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable2sSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable2Slice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable2sExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserTable2Exists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserTable2 exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserTable2Exists to return true, but got false.")
	}
}

func testUserTable2sFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userTable2Found, err := FindUserTable2(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userTable2Found == nil {
		t.Error("want a record, got nil")
	}
}

func testUserTable2sBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserTable2s().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserTable2sOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserTable2s().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserTable2sAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userTable2One := &UserTable2{}
	userTable2Two := &UserTable2{}
	if err = randomize.Struct(seed, userTable2One, userTable2DBTypes, false, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable2Two, userTable2DBTypes, false, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable2One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable2Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable2s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserTable2sCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userTable2One := &UserTable2{}
	userTable2Two := &UserTable2{}
	if err = randomize.Struct(seed, userTable2One, userTable2DBTypes, false, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable2Two, userTable2DBTypes, false, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable2One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable2Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userTable2BeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2AfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2AfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2BeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2AfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2BeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2AfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2BeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func userTable2AfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable2) error {
	*o = UserTable2{}
	return nil
}

func testUserTable2sHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserTable2{}
	o := &UserTable2{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userTable2DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable2 object: %s", err)
	}

	AddUserTable2Hook(boil.BeforeInsertHook, userTable2BeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userTable2BeforeInsertHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.AfterInsertHook, userTable2AfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userTable2AfterInsertHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.AfterSelectHook, userTable2AfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userTable2AfterSelectHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.BeforeUpdateHook, userTable2BeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userTable2BeforeUpdateHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.AfterUpdateHook, userTable2AfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userTable2AfterUpdateHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.BeforeDeleteHook, userTable2BeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userTable2BeforeDeleteHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.AfterDeleteHook, userTable2AfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userTable2AfterDeleteHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.BeforeUpsertHook, userTable2BeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userTable2BeforeUpsertHooks = []UserTable2Hook{}

	AddUserTable2Hook(boil.AfterUpsertHook, userTable2AfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userTable2AfterUpsertHooks = []UserTable2Hook{}
}

func testUserTable2sInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable2sInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userTable2ColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable2sReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable2sReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable2Slice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable2sSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable2s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userTable2DBTypes = map[string]string{`ID`: `bigint`, `Firstname`: `varchar`, `Lastname`: `varchar`}
	_                 = bytes.MinRead
)

func testUserTable2sUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userTable2PrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userTable2AllColumns) == len(userTable2PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserTable2sSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userTable2AllColumns) == len(userTable2PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable2{}
	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable2DBTypes, true, userTable2PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userTable2AllColumns, userTable2PrimaryKeyColumns) {
		fields = userTable2AllColumns
	} else {
		fields = strmangle.SetComplement(
			userTable2AllColumns,
			userTable2PrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserTable2Slice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserTable2sUpsert(t *testing.T) {
	t.Parallel()

	if len(userTable2AllColumns) == len(userTable2PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserTable2UniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserTable2{}
	if err = randomize.Struct(seed, &o, userTable2DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable2: %s", err)
	}

	count, err := UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userTable2DBTypes, false, userTable2PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable2 struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable2: %s", err)
	}

	count, err = UserTable2s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
