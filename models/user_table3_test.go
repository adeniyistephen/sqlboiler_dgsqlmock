// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserTable3s(t *testing.T) {
	t.Parallel()

	query := UserTable3s()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserTable3sDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable3sQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserTable3s().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable3sSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable3Slice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserTable3sExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserTable3Exists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserTable3 exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserTable3Exists to return true, but got false.")
	}
}

func testUserTable3sFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userTable3Found, err := FindUserTable3(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userTable3Found == nil {
		t.Error("want a record, got nil")
	}
}

func testUserTable3sBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserTable3s().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserTable3sOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserTable3s().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserTable3sAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userTable3One := &UserTable3{}
	userTable3Two := &UserTable3{}
	if err = randomize.Struct(seed, userTable3One, userTable3DBTypes, false, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable3Two, userTable3DBTypes, false, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable3One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable3Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable3s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserTable3sCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userTable3One := &UserTable3{}
	userTable3Two := &UserTable3{}
	if err = randomize.Struct(seed, userTable3One, userTable3DBTypes, false, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}
	if err = randomize.Struct(seed, userTable3Two, userTable3DBTypes, false, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userTable3One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTable3Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userTable3BeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3AfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3AfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3BeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3AfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3BeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3AfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3BeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func userTable3AfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserTable3) error {
	*o = UserTable3{}
	return nil
}

func testUserTable3sHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserTable3{}
	o := &UserTable3{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userTable3DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable3 object: %s", err)
	}

	AddUserTable3Hook(boil.BeforeInsertHook, userTable3BeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userTable3BeforeInsertHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.AfterInsertHook, userTable3AfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userTable3AfterInsertHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.AfterSelectHook, userTable3AfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userTable3AfterSelectHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.BeforeUpdateHook, userTable3BeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userTable3BeforeUpdateHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.AfterUpdateHook, userTable3AfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userTable3AfterUpdateHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.BeforeDeleteHook, userTable3BeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userTable3BeforeDeleteHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.AfterDeleteHook, userTable3AfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userTable3AfterDeleteHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.BeforeUpsertHook, userTable3BeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userTable3BeforeUpsertHooks = []UserTable3Hook{}

	AddUserTable3Hook(boil.AfterUpsertHook, userTable3AfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userTable3AfterUpsertHooks = []UserTable3Hook{}
}

func testUserTable3sInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable3sInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userTable3ColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserTable3sReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable3sReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserTable3Slice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserTable3sSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserTable3s().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userTable3DBTypes = map[string]string{`ID`: `bigint`, `Firstname`: `varchar`, `Lastname`: `varchar`}
	_                 = bytes.MinRead
)

func testUserTable3sUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userTable3PrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userTable3AllColumns) == len(userTable3PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserTable3sSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userTable3AllColumns) == len(userTable3PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserTable3{}
	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userTable3DBTypes, true, userTable3PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userTable3AllColumns, userTable3PrimaryKeyColumns) {
		fields = userTable3AllColumns
	} else {
		fields = strmangle.SetComplement(
			userTable3AllColumns,
			userTable3PrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserTable3Slice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserTable3sUpsert(t *testing.T) {
	t.Parallel()

	if len(userTable3AllColumns) == len(userTable3PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserTable3UniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserTable3{}
	if err = randomize.Struct(seed, &o, userTable3DBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable3: %s", err)
	}

	count, err := UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userTable3DBTypes, false, userTable3PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserTable3 struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserTable3: %s", err)
	}

	count, err = UserTable3s().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
